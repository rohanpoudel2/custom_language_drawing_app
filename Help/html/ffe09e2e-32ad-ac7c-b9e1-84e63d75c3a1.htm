<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CommandParser Fields</title><meta name="Title" content="Fields" /><meta name="Help.Id" content="Fields.T:Assignment.CommandParser" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Assignment" /><meta name="guid" content="ffe09e2e-32ad-ac7c-b9e1-84e63d75c3a1" /><meta name="tocFile" content="../toc/IDEA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">A Sandcastle Documented Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Command<wbr />Parser Fields</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDADASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="335867e6-c7a7-304d-caf4-04add84f5f01.htm">calledMethod</a></td><td>
            The `calledMethod` variable holds the name of the method that is currently being called.
            </td></tr><tr><td><a href="9222a214-8295-5795-3cee-2674df452839.htm">colorIndex</a></td><td>
            The `colorIndex` variable holds the index of the current color in the flashing colors array.
            </td></tr><tr><td><a href="cf7cb1f0-0db6-8d27-5505-a91a6e47fd94.htm">commandSplit</a></td><td>
            The `commandSplit` variable is a string array that is used to store the results of splitting a command string into individual elements.
            </td></tr><tr><td><a href="75ffce98-3337-32d0-88db-d2ebbea690df.htm">conditionCommands</a></td><td>
             The `conditionCommands` list holds the commands that should be executed in the if block.
            </td></tr><tr><td><a href="ad5d2525-2891-34aa-943b-abb579e4f35a.htm">currentMethodname</a></td><td>
            The `currentMethodname` variable holds the name of the current method being parsed.
            </td></tr><tr><td><a href="d7583230-f539-45b5-bf5f-bf217d6169b4.htm">errorIndex</a></td><td>
            The `errorIndex` variable holds the index of the current error encountered.
            </td></tr><tr><td><a href="451e35fb-8aeb-a0cd-854c-e5938e178cd4.htm">errors</a></td><td>
            The `errors` list holds the errors that occur during the parsing of the commands.
            </td></tr><tr><td><a href="af9741e2-e55f-926f-b2c7-2b54c8467aee.htm">flashingColors</a></td><td>
            The `flashingColors` array holds the colors that the shapes should flash between.
            </td></tr><tr><td><a href="e3649756-d97a-f579-1a42-fc9baeb27eb3.htm">flashingInterval</a></td><td>
            The `flashingInterval` variable holds the interval, in milliseconds, at which the shapes should flash between colors.
            </td></tr><tr><td><a href="8c4c5050-7e89-5575-53d9-8fb10e1ec052.htm">flashShapes</a></td><td>
            The `flashShapes` variable is a thread that is responsible for flashing the shapes.
            </td></tr><tr><td><a href="37242409-df59-01cc-7391-dccb69f63c45.htm">flashStatus</a></td><td>
            The `flashStatus` variable indicates the current flash status of the shapes.
            </td></tr><tr><td><a href="3f8e0c64-2ea0-0d67-61e3-48c523b4b323.htm">ifCount</a></td><td>
            The `ifCount` variable holds the number of if blocks encountered.
            </td></tr><tr><td><a href="6766874a-659d-4f80-d79d-10d1803012a3.htm">inCondition</a></td><td>
            The `inCondition` variable indicates if the parser is currently inside an if block.
            </td></tr><tr><td><a href="9a62dba4-55dc-bf2a-be52-010abfbd4f96.htm">inLoop</a></td><td>
            The `inLoop` variable indicates if the parser is currently inside a loop block.
            </td></tr><tr><td><a href="6f30ded3-453c-619d-ee02-df4106b372aa.htm">inMethod</a></td><td>
            The `inMethod` variable indicates if the parser is currently inside a method block.
            </td></tr><tr><td><a href="91ad877c-a048-9381-46d7-59ba30baf979.htm">loopCommands</a></td><td>
            The `loopCommands` list holds the commands that should be executed in the loop block.
            </td></tr><tr><td><a href="e1d8e994-2898-2205-6f2d-a3a522d548ab.htm">loopCount</a></td><td>
            The `loopCount` variable holds the number of times the loop block has been executed.
            </td></tr><tr><td><a href="c7802ce7-e56d-4a26-7538-cd09473921e3.htm">loopInterval</a></td><td>
            The `loopInterval` variable holds the interval at which the loop block should be executed.
            </td></tr><tr><td><a href="d1d9c8ad-3da2-2748-5891-8b7a6f83daec.htm">loopStatement</a></td><td>
            The `loopStatement` variable holds the loop statement.
            </td></tr><tr><td><a href="d0c7317a-1fac-5797-ae1e-3870102957b5.htm">methodCommands</a></td><td>
            The `methodCommands` dictionary holds the commands of the user-defined methods, keyed by method name.
            </td></tr><tr><td><a href="5b675f96-f525-bb4e-b473-36edca73580d.htm">methodCount</a></td><td>
            The `methodCount` variable holds the number of method blocks encountered.
            </td></tr><tr><td><a href="f630efd2-8f08-561a-6719-3a53634a94d5.htm">methods</a></td><td>
            The `methods` dictionary holds the user-defined methods and their corresponding commands.
            </td></tr><tr><td><a href="63cd1568-7529-5a17-1adc-604ef5566b3a.htm">myArtWork</a></td><td>
            The `myArtWork` variable is an instance of the `ArtWork` class that holds the information and methods related to the artwork being drawn.
            </td></tr><tr><td><a href="1db7d288-f2d1-62f0-6562-47fa098b2dc5.htm">parameter</a></td><td>
            The `parameter` variable holds the parameter of a command.
            </td></tr><tr><td><a href="7c4fed80-364c-d4a4-98c8-92acca77606e.htm">refreshMethod</a></td><td>
            The `refreshMethod` variable holds a reference to a method that is responsible for refreshing the artwork.
            </td></tr><tr><td><a href="9a1deff3-117b-410c-5906-86acdfbf7f83.htm">shapeCommands</a></td><td>
            The `shapeCommands` list holds the shape commands that are encountered.
            </td></tr><tr><td><a href="bb8c31cd-a4bb-8772-8431-5566a938f8ec.htm">shapeCommandsCopy</a></td><td>
            The `shapeCommandsCopy` list holds a copy of the shape commands that are encountered.
            </td></tr><tr><td><a href="3c213b71-9e76-dc8e-26d0-182a66fe6f00.htm">stopFlash</a></td><td>
            The `stopFlash` variable indicates if the flash thread should stop running.
            </td></tr><tr><td><a href="89de4826-de2a-17ed-d02a-6fceea71a2cd.htm">validIf</a></td><td>
            The `validIf` variable indicates if the current if statement is valid.
            </td></tr><tr><td><a href="5be20d11-e38d-636b-81f5-ac14f5557aa6.htm">validLoop</a></td><td>
            The `validLoop` variable indicates if the current loop statement is valid.
            </td></tr><tr><td><a href="0400f669-2913-d174-68d4-9396de3f7f46.htm">variable</a></td><td>
            The `variable` dictionary holds the user-defined variables and their values.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="6bdb4391-152e-562e-3e8f-1298ec0b64dc.htm">CommandParser Class</a></div><div><a href="d176f64a-4b5e-bb08-4361-19ddbd821a2b.htm">Assignment Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script></body></html>