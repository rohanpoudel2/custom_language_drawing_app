<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CommandParser Class</title><meta name="Title" content="CommandParser" /><meta name="Help.Id" content="T:Assignment.CommandParser" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Assignment" /><meta name="guid" content="6bdb4391-152e-562e-3e8f-1298ec0b64dc" /><meta name="Description" content="The CommandParser class is responsible for parsing and executing the commands provided by the user. It contains methods to assign variables, check syntax, execute shape commands, handle loops and conditions, and more." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">A Sandcastle Documented Class Library</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Command<wbr />Parser Class</h1><div class="summary">
            The CommandParser class is responsible for parsing and executing the commands provided by the user.
            It contains methods to assign variables, check syntax, execute shape commands, handle loops and conditions, and more.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="d176f64a-4b5e-bb08-4361-19ddbd821a2b.htm">Assignment</a><br /><strong>Assembly:</strong> Assignment (in Assignment.exe) Version: 1.0.0.0 (1.0.0.0)<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">CommandParser</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">CommandParser</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="ID6EASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="6bbcdb55-e853-611c-b572-bbc3294378ff.htm">CommandParser</a></td><td>
            The constructor of the CommandParser class which initializes an instance of ArtWork.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="ID0AB0EASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="0cc4590a-e442-8a62-c4c4-5bd1282a36b2.htm">assignVariables</a></td><td>
            Assigns a value to a variable or performs arithmetic operations on variables and assigns the result to a variable.
            </td></tr><tr><td><a href="5935b216-a9ed-0b5d-c9da-513f6a40452c.htm">checkColor</a></td><td>
            checkColor method is used to check whether the given color name is a known color or not.
            </td></tr><tr><td><a href="7b6d030a-aa8c-dfa6-ea5e-0dc7d1a9d111.htm">checkCommandLength</a></td><td>
            This method checks if the length of the command given is equal to the expected length
            </td></tr><tr><td><a href="c87458fd-056f-4645-a019-7852d7672a7b.htm">checkParameter</a></td><td>
            The `checkParameter` method is used to check the validity of a given parameter and convert it to the specified type.
            </td></tr><tr><td><a href="1a2bef01-b5b4-7963-d4b1-5c38fa08b203.htm">checkSyntax</a></td><td>
            This method checks the syntax of the given commands by verifying whether the command is an assignment statement.
            If not, it checks whether the command is a valid shape command or other command. If the command is a shape command or other available command, it checks the
            number of parameters passed to the command and whether they are valid parameters. If any errors are found, they are
            added to the errors list. If errors had been found it does not forward the commands to `runCommand` function.
            </td></tr><tr><td><a href="e3ac81ab-687f-97d7-49ed-90f66f7f35b1.htm">checkVariables</a></td><td>
            This method checks the variables in the command string that is passed in and performs mathematical operations on them, such as addition, subtraction, multiplication, and division, based on the operator passed in.
            The result of these operations is then assigned to a variable.
            </td></tr><tr><td><a href="b988f23c-6861-ef38-6382-384a286e10a4.htm">clearVariables</a></td><td>
            This method clears all the variables, loop commands, loop count, condition commands, if count, method count, methods, method commands, and current method name.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Determines whether the specified object is equal to the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.finalize#system-object-finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Serves as the default hash function. <br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://learn.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone#system-object-memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td>Creates a shallow copy of the current <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="8f99e70f-dc07-e8e7-3114-2bb327a3c180.htm">refresh</a></td><td>
            This method assigns a method to be used as the refresh method for the current object.
            </td></tr><tr><td><a href="6a63b5ef-a274-95d9-0d1f-a6d91bcafac1.htm">resetColor</a></td><td>
            This method is used to reset the color of the shape to black.
            </td></tr><tr><td><a href="6a17fccf-302d-38c3-0fa5-df1cb2dceaaa.htm">resetFill</a></td><td>
            This method is used to reset the fill of the shape.
            </td></tr><tr><td><a href="5437b5ec-a5a3-66e0-e5b8-bda52f784fbb.htm">runCommand</a></td><td>
            Runs the command passed in the instruction parameter.
            It splits the instruction by space and checks for the first word of the command.
            It checks if the command is a valid shape command or other command and processes it accordingly.
            It also checks if the command is being run inside a loop, condition or a method and processes it accordingly.
            It also starts a new thread to flash the shapes that have been drawn.
            </td></tr><tr><td><a href="a26f4a48-a356-b961-29ec-d51a4d4feefc.htm">showError</a></td><td>
            This method is used to return the list of errors.
            </td></tr><tr><td><a href="758ee25a-8d9f-36ab-6349-ee2f42ac92a4.htm">startFlashing</a></td><td>
            This method starts flashing the shapes that have been drawn.
            It takes a list of shape commands as an input and flashes them in the specified colors. 
            The flashing can be stopped by setting the stopFlash variable to true. 
            It uses the runCommand method to run the shape commands and the flashing interval can be adjusted by changing the value of the `flashingInterva` variable.
            Any errors thrown will be added to the errors list for further handling.
            </td></tr><tr><td><a href="2852ccae-4cb3-f964-1e92-cb94f5e96d4e.htm">stopFlashing</a></td><td>
            This function is used to stop the flashing of the shapes on the screen. 
            It sets the stopFlash flag to true, flashStatus flag to false, reset the fill and color, and waits for the flashShapes thread to complete.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td>Returns a string that represents the current object.<br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAEASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="335867e6-c7a7-304d-caf4-04add84f5f01.htm">calledMethod</a></td><td>
            The `calledMethod` variable holds the name of the method that is currently being called.
            </td></tr><tr><td><a href="9222a214-8295-5795-3cee-2674df452839.htm">colorIndex</a></td><td>
            The `colorIndex` variable holds the index of the current color in the flashing colors array.
            </td></tr><tr><td><a href="cf7cb1f0-0db6-8d27-5505-a91a6e47fd94.htm">commandSplit</a></td><td>
            The `commandSplit` variable is a string array that is used to store the results of splitting a command string into individual elements.
            </td></tr><tr><td><a href="75ffce98-3337-32d0-88db-d2ebbea690df.htm">conditionCommands</a></td><td>
             The `conditionCommands` list holds the commands that should be executed in the if block.
            </td></tr><tr><td><a href="ad5d2525-2891-34aa-943b-abb579e4f35a.htm">currentMethodname</a></td><td>
            The `currentMethodname` variable holds the name of the current method being parsed.
            </td></tr><tr><td><a href="d7583230-f539-45b5-bf5f-bf217d6169b4.htm">errorIndex</a></td><td>
            The `errorIndex` variable holds the index of the current error encountered.
            </td></tr><tr><td><a href="451e35fb-8aeb-a0cd-854c-e5938e178cd4.htm">errors</a></td><td>
            The `errors` list holds the errors that occur during the parsing of the commands.
            </td></tr><tr><td><a href="af9741e2-e55f-926f-b2c7-2b54c8467aee.htm">flashingColors</a></td><td>
            The `flashingColors` array holds the colors that the shapes should flash between.
            </td></tr><tr><td><a href="e3649756-d97a-f579-1a42-fc9baeb27eb3.htm">flashingInterval</a></td><td>
            The `flashingInterval` variable holds the interval, in milliseconds, at which the shapes should flash between colors.
            </td></tr><tr><td><a href="8c4c5050-7e89-5575-53d9-8fb10e1ec052.htm">flashShapes</a></td><td>
            The `flashShapes` variable is a thread that is responsible for flashing the shapes.
            </td></tr><tr><td><a href="37242409-df59-01cc-7391-dccb69f63c45.htm">flashStatus</a></td><td>
            The `flashStatus` variable indicates the current flash status of the shapes.
            </td></tr><tr><td><a href="3f8e0c64-2ea0-0d67-61e3-48c523b4b323.htm">ifCount</a></td><td>
            The `ifCount` variable holds the number of if blocks encountered.
            </td></tr><tr><td><a href="6766874a-659d-4f80-d79d-10d1803012a3.htm">inCondition</a></td><td>
            The `inCondition` variable indicates if the parser is currently inside an if block.
            </td></tr><tr><td><a href="9a62dba4-55dc-bf2a-be52-010abfbd4f96.htm">inLoop</a></td><td>
            The `inLoop` variable indicates if the parser is currently inside a loop block.
            </td></tr><tr><td><a href="6f30ded3-453c-619d-ee02-df4106b372aa.htm">inMethod</a></td><td>
            The `inMethod` variable indicates if the parser is currently inside a method block.
            </td></tr><tr><td><a href="91ad877c-a048-9381-46d7-59ba30baf979.htm">loopCommands</a></td><td>
            The `loopCommands` list holds the commands that should be executed in the loop block.
            </td></tr><tr><td><a href="e1d8e994-2898-2205-6f2d-a3a522d548ab.htm">loopCount</a></td><td>
            The `loopCount` variable holds the number of times the loop block has been executed.
            </td></tr><tr><td><a href="c7802ce7-e56d-4a26-7538-cd09473921e3.htm">loopInterval</a></td><td>
            The `loopInterval` variable holds the interval at which the loop block should be executed.
            </td></tr><tr><td><a href="d1d9c8ad-3da2-2748-5891-8b7a6f83daec.htm">loopStatement</a></td><td>
            The `loopStatement` variable holds the loop statement.
            </td></tr><tr><td><a href="d0c7317a-1fac-5797-ae1e-3870102957b5.htm">methodCommands</a></td><td>
            The `methodCommands` dictionary holds the commands of the user-defined methods, keyed by method name.
            </td></tr><tr><td><a href="5b675f96-f525-bb4e-b473-36edca73580d.htm">methodCount</a></td><td>
            The `methodCount` variable holds the number of method blocks encountered.
            </td></tr><tr><td><a href="f630efd2-8f08-561a-6719-3a53634a94d5.htm">methods</a></td><td>
            The `methods` dictionary holds the user-defined methods and their corresponding commands.
            </td></tr><tr><td><a href="63cd1568-7529-5a17-1adc-604ef5566b3a.htm">myArtWork</a></td><td>
            The `myArtWork` variable is an instance of the `ArtWork` class that holds the information and methods related to the artwork being drawn.
            </td></tr><tr><td><a href="1db7d288-f2d1-62f0-6562-47fa098b2dc5.htm">parameter</a></td><td>
            The `parameter` variable holds the parameter of a command.
            </td></tr><tr><td><a href="7c4fed80-364c-d4a4-98c8-92acca77606e.htm">refreshMethod</a></td><td>
            The `refreshMethod` variable holds a reference to a method that is responsible for refreshing the artwork.
            </td></tr><tr><td><a href="9a1deff3-117b-410c-5906-86acdfbf7f83.htm">shapeCommands</a></td><td>
            The `shapeCommands` list holds the shape commands that are encountered.
            </td></tr><tr><td><a href="bb8c31cd-a4bb-8772-8431-5566a938f8ec.htm">shapeCommandsCopy</a></td><td>
            The `shapeCommandsCopy` list holds a copy of the shape commands that are encountered.
            </td></tr><tr><td><a href="3c213b71-9e76-dc8e-26d0-182a66fe6f00.htm">stopFlash</a></td><td>
            The `stopFlash` variable indicates if the flash thread should stop running.
            </td></tr><tr><td><a href="89de4826-de2a-17ed-d02a-6fceea71a2cd.htm">validIf</a></td><td>
            The `validIf` variable indicates if the current if statement is valid.
            </td></tr><tr><td><a href="5be20d11-e38d-636b-81f5-ac14f5557aa6.htm">validLoop</a></td><td>
            The `validLoop` variable indicates if the current loop statement is valid.
            </td></tr><tr><td><a href="0400f669-2913-d174-68d4-9396de3f7f46.htm">variable</a></td><td>
            The `variable` dictionary holds the user-defined variables and their values.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="d176f64a-4b5e-bb08-4361-19ddbd821a2b.htm">Assignment Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>